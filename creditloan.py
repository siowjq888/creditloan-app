# -*- coding: utf-8 -*-
"""creditloan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ST0_yrimK3CEeqSBVSj6U1wm4EpuQbmQ
"""

import gradio as gr
import joblib
import numpy as np
import time

# Load model and label encoder
start_time = time.time()
pipeline = joblib.load("model.pkl")
label_encoder = joblib.load("label_encoder.pkl")
end_time = time.time()
print(f"Model loaded in {end_time - start_time:.2f} seconds.")

# Prediction function
def predict_fn(monthly_inhand_salary, num_bank_accounts, num_credit_card, interest_rate,
               delay_from_due_date, num_of_delayed_payment, changed_credit_limit,
               num_credit_inquiries, credit_utilization_ratio, total_emi_per_month,
               amount_invested_monthly, monthly_balance, credit_history_age_months,
               month_num, num_loan_types):
    try:
        print("Received inputs:", monthly_inhand_salary, num_bank_accounts, num_credit_card,
              interest_rate, delay_from_due_date, num_of_delayed_payment, changed_credit_limit,
              num_credit_inquiries, credit_utilization_ratio, total_emi_per_month,
              amount_invested_monthly, monthly_balance, credit_history_age_months,
              month_num, num_loan_types)

        # Prepare the data (make sure it matches the training data)
        data = np.array([[monthly_inhand_salary, num_bank_accounts, num_credit_card,
                          interest_rate, delay_from_due_date, num_of_delayed_payment,
                          changed_credit_limit, num_credit_inquiries, credit_utilization_ratio,
                          total_emi_per_month, amount_invested_monthly, monthly_balance,
                          credit_history_age_months, month_num, num_loan_types]])


        # Make prediction using the loaded pipeline
        prediction = pipeline.predict(data)
        print("Prediction result:", prediction)

        # Convert numerical prediction back to label (Good/Standard/Bad)
        if isinstance(prediction[0], str):
            label = prediction[0]
        else:
            label = label_encoder.inverse_transform(prediction)[0]

        return f"Predicted Credit Mix: {label}"

    except Exception as e:
        print("‚ùå Error during prediction:", str(e))
        return f"Error: {str(e)}"

# Gradio UI with 15 numerical inputs
iface = gr.Interface(
    fn=predict_fn,
    inputs=[
        gr.Number(label="Monthly Inhand Salary"),
        gr.Number(label="Number of Bank Accounts"),
        gr.Number(label="Number of Credit Cards"),
        gr.Number(label="Interest Rate"),
        gr.Number(label="Delay from Due Date"),
        gr.Number(label="Number of Delayed Payment"),
        gr.Number(label="Changed Credit Limit"),
        gr.Number(label="Number of Credit Inquiries"),
        gr.Number(label="Credit Utilization Ratio"),
        gr.Number(label="Total EMI per Month"),
        gr.Number(label="Amount Invested Monthly"),
        gr.Number(label="Monthly Balance"),
        gr.Number(label="Credit History Age (Months)"),
        gr.Number(label="Month Number"),
        gr.Number(label="Number of Loan Types"),
    ],
    outputs="text",
    title="Credit Loan Prediction App",
    description="Enter financial details to predict the customer's Credit Mix (Good, Standard, Bad)."
)

# Launch the Gradio interface
iface.launch()